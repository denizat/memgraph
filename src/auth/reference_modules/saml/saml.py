#!/usr/bin/python3
import io
import json
from os.path import dirname

from onelogin.saml2.auth import OneLogin_Saml2_Auth
from onelogin.saml2.settings import OneLogin_Saml2_Settings


def init_saml_auth(req):
    saml_settings = OneLogin_Saml2_Settings(custom_base_path=dirname(__file__))
    auth = OneLogin_Saml2_Auth(req, saml_settings)
    return auth


def prepare_request(password):
    # Dummy password Base64 encoded SAMLResponse assertion to be validated against the x509 certificate
    # Delete this part as the Base64 encoded SAMLResponse needs to be inserted in the password field
    # when communicating with the driver
    password = ""
    return {
        "post_data": {"SAMLResponse": password},
    }


def authenticate(username, password):
    # Validates the assertion using the SAML authentication protocol and authorizes the user
    # with the proper role
    # Change logic in order to determine the user's respective role
    request = prepare_request(password)
    auth = init_saml_auth(request)

    auth.process_response(request_id=None)
    errors = auth.get_errors()

    if not auth.is_authenticated():
        return {"authenticated": False, "role": ""}

    attrs = auth.get_attributes()

    return {"authenticated": True, "role": "moderator"}


if __name__ == "__main__":
    # Part specific to Memgraph's communication with the auth module
    input_stream = io.FileIO(1000, mode="r")
    output_stream = io.FileIO(1001, mode="w")
    while True:
        params = json.loads(input_stream.readline().decode("ascii"))
        ret = authenticate(**params)
        output_stream.write((json.dumps(ret) + "\n").encode("ascii"))
